AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  projectName:
    Type: String
    Default: test
    Description : "Resource prefix"
    AllowedPattern : "^[a-zA-Z][a-zA-Z0-9]*"
  eC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  iamRole1:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName: !Sub ${projectName}-lambda-role
  vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-vpc
  internetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-igw
  igwAttachVpc:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc
  publicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: 'ap-northeast-1a'
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-subnet01
  publicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: 'ap-northeast-1c'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-subnet02
  privateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: 'ap-northeast-1a'
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-subnet01
  privateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: 'ap-northeast-1c'
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-subnet02
  privateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: 'ap-northeast-1a'
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-subnet03
  privateSubnet4:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: 'ap-northeast-1c'
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-subnet04
  publicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-rtb
  routeAddInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable
  associatePublicSubnet1ToPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet1
  associatePublicSubnet2ToPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet2
  privateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-rtb
  associatePrivateSubnet1ToPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnet1
  associatePrivateSubnet2ToPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnet2
  associatePrivateSubnet3ToPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnet3
  associatePrivateSubnet4ToPublicRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnet4
  ec2Securitygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${projectName}-ec2-sg
      GroupDescription: !Sub ${projectName}-ec2-sg
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-ec2-sg
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: '0.0.0.0/0'
  lambdaSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${projectName}-lambda-sg
      GroupDescription: !Sub ${projectName}-lambda-sg
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-lambda-sg
      VpcId: !Ref vpc
  publicAlbSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${projectName}-public-alb-sg
      GroupDescription: !Sub ${projectName}-public-alb-sg
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-alb-sg
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '0.0.0.0/0'
  privateAlbSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${projectName}-private-alb-sg
      GroupDescription: !Sub ${projectName}-private-alb-sg
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-alb-sg
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '0.0.0.0/0'
  vpcLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Sub ${projectName}-Function
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Handler: index.lambda_handler
      Role: !GetAtt iamRole1.Arn
      Runtime: python3.7
      VpcConfig:
        SecurityGroupIds:
          - !Ref lambdaSecuritygroup
        SubnetIds:
          - !Ref privateSubnet3
          - !Ref privateSubnet4
  vpcLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt vpcLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
  publicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${projectName}-public-alb
      Scheme: internet-facing
      Subnets:
        - !Ref publicSubnet1
        - !Ref publicSubnet2
      SecurityGroups:
        - !Ref publicAlbSecuritygroup
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-alb
  publicLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${projectName}-public-trg
      Tags:
         - Key: Name
           Value: !Sub ${projectName}-public-trg
      TargetType: lambda
      Targets:
      - Id: !GetAtt vpcLambda.Arn
  publicLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref publicLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref publicLoadBalancer
      Port: 80
      Protocol: HTTP
  privateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${projectName}-private-alb
      Scheme: internal
      Subnets:
        - !Ref privateSubnet1
        - !Ref privateSubnet2
      SecurityGroups:
        - !Ref privateAlbSecuritygroup
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-alb
  privateLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${projectName}-private-trg
      Tags:
         - Key: Name
           Value: !Sub ${projectName}-private-trg
      TargetType: lambda
      Targets:
      - Id: !GetAtt vpcLambda.Arn
  privateLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref privateLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref privateLoadBalancer
      Port: 80
      Protocol: HTTP
  eC2:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: ap-northeast-1c
      ImageId: ami-00d101850e971728d
      InstanceType: t2.micro
      KeyName: !Ref eC2KeyPair
      SecurityGroupIds:
        - !Ref ec2Securitygroup
      SubnetId: !Ref publicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-ec2
